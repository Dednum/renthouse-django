# Generated by Django 5.2 on 2025-06-13 14:16

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Amenities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(blank=True, max_length=100, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.')),
                ('full_name', models.CharField(blank=True, max_length=100, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('course', models.CharField(blank=True, choices=[('', 'Select your course (UniKL MIIT)'), ('BSE', 'Bachelor of Software Engineering with Honours'), ('BIOT', 'Bachelor in Information Technology'), ('BCSS', 'Bachelor of Information Technology (Hons.) in Computer System Security'), ('BIS', 'Bachelor of Information System with Honours'), ('BNS', 'Bachelor of Computer Engineering Technology (Networking Systems)'), ('other', 'Other')], default='', max_length=100, null=True)),
                ('role', models.CharField(choices=[('student', 'Student'), ('landlord', 'Landlord'), ('admin', 'Admin')], default='student', max_length=10)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=20, null=True, verbose_name='Gender')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('house_type', models.CharField(choices=[('Condominium', 'Condominium'), ('House', 'House'), ('Apartment', 'Apartment'), ('Studio', 'Studio')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('rent', models.DecimalField(decimal_places=2, max_digits=10)),
                ('university_nearby', models.CharField(blank=True, max_length=200, null=True)),
                ('address', models.TextField()),
                ('bedrooms', models.IntegerField(default=1, help_text='Number of bedrooms in the property.')),
                ('total_room', models.IntegerField(default=3, help_text='Total number of rooms (including bedrooms, living room, kitchen, etc.).')),
                ('total_toilets', models.IntegerField(default=2, help_text='Total number of toilets/bathrooms in the property.')),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('square_footage', models.IntegerField(blank=True, null=True)),
                ('main_image', models.ImageField(blank=True, null=True, upload_to='property_images/')),
                ('max_tenants', models.IntegerField(default=1, help_text='Maximum number of occupants allowed in this property.')),
                ('is_available', models.BooleanField(default=True, help_text='Is the property currently available for booking as a whole unit?')),
                ('gender_preferred', models.CharField(choices=[('any', 'Any'), ('male', 'Male'), ('female', 'Female')], default='any', help_text='Preferred gender for tenants for this property.', max_length=20)),
                ('amenities', models.ManyToManyField(blank=True, related_name='properties', to='users.amenity')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_properties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Properties',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('issue_title', models.CharField(max_length=200)),
                ('issue_description', models.TextField()),
                ('submitted_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('rejected', 'Rejected')], default='new', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('resolved_date', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True, null=True)),
                ('submitted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_maintenance_requests', to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_requests', to='users.property')),
            ],
            options={
                'verbose_name_plural': 'Maintenance Requests',
                'ordering': ['-submitted_date'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_chats', to='users.property')),
            ],
            options={
                'verbose_name_plural': 'Chat Messages',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('number_of_occupants', models.IntegerField(default=1, help_text='Number of people included in this booking.')),
                ('full_name_on_form', models.CharField(default='', help_text='Full name as entered on the booking form.', max_length=100)),
                ('gender_on_form', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], default='prefer_not_to_say', help_text='Gender as selected on the booking form.', max_length=20, null=True)),
                ('student_id_number', models.CharField(blank=True, default='', help_text='Student ID / Matriculation Number from the form.', max_length=50, null=True)),
                ('email_on_form', models.EmailField(default='', help_text='Email address as entered on the booking form.', max_length=100)),
                ('current_address_on_form', models.TextField(default='', help_text='Current address as entered on the booking form.')),
                ('university_name_on_form', models.CharField(blank=True, default='', help_text='University/College name from the form.', max_length=200, null=True)),
                ('expected_duration_of_stay', models.CharField(default='', help_text='Expected duration of stay from the form.', max_length=100)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_bookings', to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='users.property')),
            ],
            options={
                'verbose_name_plural': 'Bookings',
            },
        ),
        migrations.CreateModel(
            name='AdditionalOccupant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('student_id_number', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(max_length=100)),
                ('phone_number', models.CharField(max_length=20)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], default='prefer_not_to_say', max_length=20, null=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_occupants', to='users.booking')),
            ],
            options={
                'verbose_name_plural': 'Additional Occupants',
                'unique_together': {('booking', 'email')},
            },
        ),
    ]
